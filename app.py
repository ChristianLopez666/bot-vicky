# ===============================================================
# VICKY CAMPA√ëAS EN REDES ‚Äì APP PRINCIPAL
# Integraci√≥n completa con Meta Cloud API (WhatsApp Business)
# Flujo activo: Pr√©stamos IMSS Ley 73
# Autor: Christian L√≥pez | GPT-5
# ===============================================================

import os
import json
import logging
import requests
import re
from flask import Flask, request, jsonify
from dotenv import load_dotenv
from datetime import datetime

# ---------------------------------------------------------------
# Cargar variables de entorno
# ---------------------------------------------------------------
load_dotenv()

META_TOKEN = os.getenv("META_TOKEN")
WABA_PHONE_ID = os.getenv("WABA_PHONE_ID")
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
ADVISOR_NUMBER = os.getenv("ADVISOR_NUMBER", "5216682478005")

# ---------------------------------------------------------------
# Configuraci√≥n de logging
# ---------------------------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

# ---------------------------------------------------------------
# Inicializaci√≥n de Flask
# ---------------------------------------------------------------
app = Flask(__name__)

# Diccionarios temporales para gestionar el estado de cada usuario
user_state = {}
user_data = {}

# ---------------------------------------------------------------
# Funci√≥n: enviar mensaje por WhatsApp (Meta Cloud API)
# ---------------------------------------------------------------
def send_message(to, text):
    """Env√≠a mensajes de texto al usuario v√≠a Meta Cloud API."""
    try:
        url = f"https://graph.facebook.com/v20.0/{WABA_PHONE_ID}/messages"
        headers = {
            "Authorization": f"Bearer {META_TOKEN}",
            "Content-Type": "application/json"
        }
        payload = {
            "messaging_product": "whatsapp",
            "to": str(to),
            "type": "text",
            "text": {"body": text}
        }
        response = requests.post(url, headers=headers, json=payload)
        if response.status_code not in (200, 201):
            logging.warning(f"‚ö†Ô∏è Error al enviar mensaje: {response.text}")
        else:
            logging.info(f"üì© Mensaje enviado correctamente a {to}")
    except Exception as e:
        logging.exception(f"‚ùå Error en send_message: {e}")

# ---------------------------------------------------------------
# Funci√≥n auxiliar: extraer n√∫mero de texto - CORREGIDA
# ---------------------------------------------------------------
def extract_number(text):
    """Extrae el primer n√∫mero encontrado dentro del texto."""
    if not text:
        return None
    # Solo eliminar comas para n√∫meros grandes, mantener puntos para decimales
    clean = text.replace(',', '').replace('$', '')
    # Buscar n√∫meros (enteros o decimales) pero evitar horas como "11:10"
    match = re.search(r'(\d{1,7})(?:\.\d+)?\b', clean)
    if match:
        try:
            # Si parece una hora (contiene :), no es un monto v√°lido
            if ':' in text:
                return None
            return float(match.group(1))
        except ValueError:
            return None
    return None

# ---------------------------------------------------------------
# Funci√≥n: interpretar respuestas s√≠/no
# ---------------------------------------------------------------
def interpret_response(text):
    """Interpreta respuestas afirmativas/negativas."""
    text_lower = (text or '').lower()
    positive_keywords = ['s√≠', 'si', 'sip', 'claro', 'por supuesto', 'ok', 'vale', 'afirmativo', 'acepto', 'yes']
    negative_keywords = ['no', 'nop', 'negativo', 'para nada', 'no acepto', 'not']
    if any(k in text_lower for k in positive_keywords):
        return 'positive'
    if any(k in text_lower for k in negative_keywords):
        return 'negative'
    return 'neutral'

# ---------------------------------------------------------------
# Men√∫ principal (para usuarios no elegibles)
# ---------------------------------------------------------------
def send_main_menu(phone):
    menu = (
        "üè¶ *INBURSA - SERVICIOS DISPONIBLES*\n\n"
        "1Ô∏è‚É£ Pr√©stamos IMSS Ley 73\n"
        "2Ô∏è‚É£ Seguros de Auto\n"
        "3Ô∏è‚É£ Seguros de Vida y Salud\n"
        "4Ô∏è‚É£ Tarjetas M√©dicas VRIM\n"
        "5Ô∏è‚É£ Financiamiento Empresarial\n\n"
        "Escribe el n√∫mero del servicio que te interese üëá"
    )
    send_message(phone, menu)

# ---------------------------------------------------------------
# Funci√≥n: manejar comando menu
# ---------------------------------------------------------------
def handle_menu_command(phone_number):
    """Maneja el comando menu para reiniciar la conversaci√≥n"""
    user_state.pop(phone_number, None)
    user_data.pop(phone_number, None)
    
    menu_text = (
        "üîÑ Conversaci√≥n reiniciada\n\n"
        "üè¶ *INBURSA - SERVICIOS DISPONIBLES*\n\n"
        "1Ô∏è‚É£ Pr√©stamos IMSS Ley 73\n"
        "2Ô∏è‚É£ Seguros de Auto\n"
        "3Ô∏è‚É£ Seguros de Vida y Salud\n"
        "4Ô∏è‚É£ Tarjetas M√©dicas VRIM\n"
        "5Ô∏è‚É£ Financiamiento Empresarial\n\n"
        "Escribe el n√∫mero o el nombre del servicio que te interesa:"
    )
    send_message(phone_number, menu_text)

# ---------------------------------------------------------------
# BLOQUE PRINCIPAL: FLUJO PR√âSTAMO IMSS LEY 73 - MODIFICADO SEG√öN REQUERIMIENTOS
# ---------------------------------------------------------------
def handle_imss_flow(phone_number, user_message):
    """Gestiona el flujo completo del pr√©stamo IMSS Ley 73."""
    msg = user_message.lower()

    # Detecci√≥n mejorada de palabras clave IMSS
    imss_keywords = ["pr√©stamo", "prestamo", "imss", "pensi√≥n", "pension", "ley 73", "1"]
    
    # Paso 1: activaci√≥n inicial por palabras clave
    if any(keyword in msg for keyword in imss_keywords):
        # Si ya est√° en flujo IMSS, no reiniciar
        current_state = user_state.get(phone_number)
        if current_state not in ["esperando_respuesta_imss", "esperando_monto_pension", 
                               "esperando_monto_solicitado", "esperando_respuesta_nomina"]:
            send_message(phone_number,
                "üëã ¬°Hola! Antes de continuar, necesito confirmar algo importante.\n\n"
                "¬øEres pensionado o jubilado del IMSS bajo la Ley 73? (Responde *s√≠* o *no*)"
            )
            user_state[phone_number] = "esperando_respuesta_imss"
        return True

    # Paso 2: validaci√≥n de respuesta IMSS
    if user_state.get(phone_number) == "esperando_respuesta_imss":
        intent = interpret_response(msg)
        if intent == 'negative':
            send_message(phone_number,
                "Entiendo. Para el pr√©stamo IMSS Ley 73 es necesario ser pensionado del IMSS. üòî\n\n"
                "Pero tengo otros servicios que pueden interesarte:"
            )
            send_main_menu(phone_number)
            user_state.pop(phone_number, None)
        elif intent == 'positive':
            send_message(phone_number,
                "Excelente üëè\n\n¬øCu√°nto recibes al mes por concepto de pensi√≥n? (Ejemplo: 8500)"
            )
            user_state[phone_number] = "esperando_monto_pension"
        else:
            send_message(phone_number, "Por favor responde *s√≠* o *no* para continuar.")
        return True

    # Paso 3: monto de pensi√≥n - VALIDACI√ìN M√çNIMO $5,000
    if user_state.get(phone_number) == "esperando_monto_pension":
        pension_monto = extract_number(msg)
        if pension_monto is not None:
            if pension_monto < 5000:
                send_message(phone_number,
                    "Para acceder al pr√©stamo IMSS Ley 73 es necesario recibir una pensi√≥n m√≠nima de $5,000 mensuales. üíµ\n\n"
                    "Si tu pensi√≥n es mayor, por favor ingresa el monto correcto. "
                    "O si prefieres, puedo mostrarte otras opciones que podr√≠an interesarte:"
                )
                send_main_menu(phone_number)
                user_state.pop(phone_number, None)
            else:
                user_data[phone_number] = {"pension_mensual": pension_monto}
                send_message(phone_number,
                    f"Perfecto üí∞ Pensi√≥n registrada: ${pension_monto:,.0f}\n\n"
                    "¬øQu√© monto deseas solicitar? (El m√≠nimo es de $40,000 MXN)"
                )
                user_state[phone_number] = "esperando_monto_solicitado"
        else:
            send_message(phone_number, "Por favor ingresa una cantidad v√°lida, ejemplo: 8500")
        return True

    # Paso 4: monto solicitado - VALIDACI√ìN M√çNIMO $40,000
    if user_state.get(phone_number) == "esperando_monto_solicitado":
        monto = extract_number(msg)
        if monto is not None:
            if monto < 40000:
                send_message(phone_number,
                    "Por el momento el monto m√≠nimo para aplicar al pr√©stamo es de $40,000 MXN. üíµ\n\n"
                    "Si deseas solicitar una cantidad mayor, puedo continuar con tu registro ‚úÖ\n"
                    "O si prefieres, puedo mostrarte otras opciones que podr√≠an interesarte:"
                )
                send_main_menu(phone_number)
                user_state.pop(phone_number, None)
            else:
                user_data[phone_number]["monto_solicitado"] = monto
                
                # ‚úÖ MODIFICACI√ìN: MOSTRAR BENEFICIOS INMEDIATAMENTE Y PREGUNTAR POR N√ìMINA
                send_message(phone_number,
                    "üéâ *¬°FELICIDADES!* Cumples con todos los requisitos para el pr√©stamo IMSS Ley 73\n\n"
                    f"‚úÖ Pensionado IMSS Ley 73\n"
                    f"‚úÖ Pensi√≥n mensual: ${user_data[phone_number]['pension_mensual']:,.0f}\n"
                    f"‚úÖ Monto solicitado: ${monto:,.0f}\n\n"
                    "üåü *BENEFICIOS DE TU PR√âSTAMO:*\n"
                    "‚Ä¢ Monto desde $40,000 hasta $650,000\n"
                    "‚Ä¢ Sin aval\n‚Ä¢ Sin revisi√≥n en Bur√≥\n"
                    "‚Ä¢ Descuento directo de tu pensi√≥n\n"
                    "‚Ä¢ Tasa preferencial"
                )
                
                send_message(phone_number,
                    "üí≥ *PARA ACCEDER A BENEFICIOS ADICIONALES EXCLUSIVOS*:\n\n"
                    "¬øTienes tu pensi√≥n depositada en Inbursa o estar√≠as dispuesto a cambiarla?\n\n"
                    "üåü *BENEFICIOS ADICIONALES CON N√ìMINA INBURSA:*\n"
                    "‚Ä¢ Rendimientos del 80% de Cetes\n"
                    "‚Ä¢ Devoluci√≥n del 20% de intereses por pago puntual\n"
                    "‚Ä¢ Anticipo de n√≥mina hasta el 50%\n"
                    "‚Ä¢ Seguro de vida y Medicall Home (telemedicina 24/7)\n"
                    "‚Ä¢ Descuentos en Sanborns y 6,000 comercios\n"
                    "‚Ä¢ Retiros sin comisi√≥n en +28,000 puntos\n\n"
                    "üí° *No necesitas cancelar tu cuenta actual*\n"
                    "üëâ ¬øAceptas cambiar tu n√≥mina a Inbursa? (s√≠/no)"
                )
                user_state[phone_number] = "esperando_respuesta_nomina"
        else:
            send_message(phone_number, "Por favor indica el monto deseado, ejemplo: 65000")
        return True

    # Paso 5: validaci√≥n n√≥mina - ‚úÖ MODIFICACI√ìN: NO DETENER PROCESO SI RESPONDE NO
    if user_state.get(phone_number) == "esperando_respuesta_nomina":
        intent = interpret_response(msg)
        
        # OBTENER DATOS PARA NOTIFICACI√ìN
        data = user_data.get(phone_number, {})
        pension = data.get('pension_mensual', 'N/D')
        monto_solicitado = data.get('monto_solicitado', 'N/D')
        
        if intent == 'positive':
            # CLIENTE ACEPTA CAMBIAR N√ìMINA
            send_message(phone_number,
                "‚úÖ *¬°Excelente decisi√≥n!* Al cambiar tu n√≥mina a Inbursa acceder√°s a todos los beneficios adicionales.\n\n"
                "üìû *Christian te contactar√° en breve* para:\n"
                "‚Ä¢ Confirmar los detalles de tu pr√©stamo\n"
                "‚Ä¢ Explicarte todos los beneficios de n√≥mina Inbursa\n"
                "‚Ä¢ Agendar el cambio de n√≥mina si as√≠ lo decides\n\n"
                "¬°Gracias por confiar en Inbursa! üè¶"
            )

            mensaje_asesor = (
                f"üî• *NUEVO PROSPECTO IMSS LEY 73 - N√ìMINA ACEPTADA*\n\n"
                f"üìû N√∫mero: {phone_number}\n"
                f"üí∞ Pensi√≥n mensual: ${pension:,.0f}\n"
                f"üíµ Monto solicitado: ${monto_solicitado:,.0f}\n"
                f"üè¶ N√≥mina Inbursa: ‚úÖ *ACEPTADA*\n"
                f"üéØ *Cliente interesado en beneficios adicionales*"
            )
            send_message(ADVISOR_NUMBER, mensaje_asesor)
            
        elif intent == 'negative':
            # ‚úÖ MODIFICACI√ìN: CLIENTE NO ACEPTA N√ìMINA PERO SIGUE EL PROCESO
            send_message(phone_number,
                "‚úÖ *¬°Perfecto!* Entiendo que por el momento prefieres mantener tu n√≥mina actual.\n\n"
                "üìû *Christian te contactar√° en breve* para:\n"
                "‚Ä¢ Confirmar los detalles de tu pr√©stamo\n"
                "‚Ä¢ Explicarte el proceso de desembolso\n\n"
                "üí° *Recuerda que en cualquier momento puedes cambiar tu n√≥mina a Inbursa* "
                "para acceder a los beneficios adicionales cuando lo desees.\n\n"
                "¬°Gracias por confiar en Inbursa! üè¶"
            )

            mensaje_asesor = (
                f"üìã *NUEVO PROSPECTO IMSS LEY 73*\n\n"
                f"üìû N√∫mero: {phone_number}\n"
                f"üí∞ Pensi√≥n mensual: ${pension:,.0f}\n"
                f"üíµ Monto solicitado: ${monto_solicitado:,.0f}\n"
                f"üè¶ N√≥mina Inbursa: ‚ùå *No por ahora*\n"
                f"üí° *Cliente cumple requisitos - Contactar para pr√©stamo b√°sico*"
            )
            send_message(ADVISOR_NUMBER, mensaje_asesor)
        else:
            send_message(phone_number, 
                "Por favor responde *s√≠* o *no*:\n\n"
                "‚Ä¢ *S√ç* - Para acceder a todos los beneficios adicionales con n√≥mina Inbursa\n"
                "‚Ä¢ *NO* - Para continuar con tu pr√©stamo manteniendo tu n√≥mina actual"
            )
            return True

        # LIMPIAR SESI√ìN DESPU√âS DE NOTIFICAR
        user_state.pop(phone_number, None)
        user_data.pop(phone_number, None)
        return True

    return False

# ---------------------------------------------------------------
# Endpoint de verificaci√≥n de Meta Webhook
# ---------------------------------------------------------------
@app.route("/webhook", methods=["GET"])
def verify_webhook():
    mode = request.args.get("hub.mode")
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")
    if mode == "subscribe" and token == VERIFY_TOKEN:
        logging.info("‚úÖ Webhook verificado correctamente.")
        return challenge, 200
    logging.warning("‚ùå Verificaci√≥n de webhook fallida.")
    return "Forbidden", 403

# ---------------------------------------------------------------
# Endpoint principal para recepci√≥n de mensajes
# ---------------------------------------------------------------
@app.route("/webhook", methods=["POST"])
def receive_message():
    try:
        data = request.get_json()
        logging.info(f"üì© Datos recibidos: {json.dumps(data, ensure_ascii=False)}")

        entry = data.get("entry", [])[0]
        change = entry.get("changes", [])[0]
        value = change.get("value", {})
        messages = value.get("messages", [])

        if not messages:
            return jsonify({"status": "ignored"}), 200

        message = messages[0]
        phone_number = message.get("from")
        message_type = message.get("type")

        if message_type == "text":
            user_message = message["text"]["body"].strip()
            
            logging.info(f"üì± Mensaje de {phone_number}: '{user_message}'")

            # ‚úÖ MANEJO DE COMANDO MENU
            if user_message.lower() == "menu":
                handle_menu_command(phone_number)
                return jsonify({"status": "ok"}), 200

            # Procesar flujo IMSS
            if handle_imss_flow(phone_number, user_message):
                return jsonify({"status": "ok"}), 200

            # ‚úÖ MEJOR RESPUESTA PARA "HOLA" Y MENSAJES NO RECONOCIDOS
            if user_message.lower() in ["hola", "hi", "hello", "buenas"]:
                send_message(phone_number,
                    "üëã ¬°Hola! Soy *Vicky*, tu asistente virtual de Inbursa.\n\n"
                    "Puedo ayudarte con:\n"
                    "‚Ä¢ üìã **Pr√©stamos IMSS Ley 73** (escribe 'pr√©stamo' o '1')\n"  
                    "‚Ä¢ üöó **Seguros de Auto** ('seguro auto' o '2')\n"
                    "‚Ä¢ üè• **Seguros de Vida y Salud** ('seguro vida' o '3')\n"
                    "‚Ä¢ üí≥ **Tarjetas M√©dicas VRIM** ('vrim' o '4')\n"
                    "‚Ä¢ üè¢ **Financiamiento Empresarial** ('empresa' o '5')\n\n"
                    "¬øEn qu√© te puedo ayudar? üôÇ"
                )
            else:
                send_message(phone_number,
                    "üëã Hola, soy *Vicky*, tu asistente de Inbursa.\n\n"
                    "No entend√≠ tu mensaje. Puedo ayudarte con:\n"
                    "‚Ä¢ Pr√©stamos IMSS (escribe 'pr√©stamo')\n"  
                    "‚Ä¢ Seguros de Auto ('seguro auto')\n"
                    "‚Ä¢ Seguros de Vida ('seguro vida')\n"
                    "‚Ä¢ Tarjetas M√©dicas VRIM ('vrim')\n"
                    "‚Ä¢ Financiamiento Empresarial ('empresa')\n\n"
                    "O escribe *menu* para ver todas las opciones organizadas."
                )
            return jsonify({"status": "ok"}), 200

        else:
            send_message(phone_number, 
                "Por ahora solo puedo procesar mensajes de texto üì©\n\n"
                "Escribe *menu* para ver los servicios disponibles."
            )
            return jsonify({"status": "ok"}), 200

    except Exception as e:
        logging.exception(f"‚ùå Error en receive_message: {e}")
        return jsonify({"error": str(e)}), 500

# ---------------------------------------------------------------
# Endpoint de salud
# ---------------------------------------------------------------
@app.route("/health", methods=["GET"])
def health():
    return jsonify({"status": "ok", "service": "Vicky Bot Inbursa"}), 200

# ---------------------------------------------------------------
# Ejecuci√≥n principal
# ---------------------------------------------------------------
if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    logging.info(f"üöÄ Iniciando Vicky Bot en puerto {port}")
    app.run(host="0.0.0.0", port=port)
