# ===============================================================
# VICKY CAMPA√ëAS EN REDES ‚Äì APP PRINCIPAL
# Integraci√≥n completa con Meta Cloud API (WhatsApp Business)
# Flujo activo: Pr√©stamos IMSS Ley 73
# Autor: Christian L√≥pez | GPT-5
# ===============================================================

import os
import json
import logging
import requests
import re
from flask import Flask, request, jsonify
from dotenv import load_dotenv
from datetime import datetime

# ---------------------------------------------------------------
# Cargar variables de entorno
# ---------------------------------------------------------------
load_dotenv()

META_TOKEN = os.getenv("META_TOKEN")
WABA_PHONE_ID = os.getenv("WABA_PHONE_ID")
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
ADVISOR_NUMBER = os.getenv("ADVISOR_NUMBER", "5216682478005")

# ---------------------------------------------------------------
# Configuraci√≥n de logging
# ---------------------------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

# ---------------------------------------------------------------
# Inicializaci√≥n de Flask
# ---------------------------------------------------------------
app = Flask(__name__)

# Diccionarios temporales para gestionar el estado de cada usuario
user_state = {}
user_data = {}

# ---------------------------------------------------------------
# Funci√≥n: enviar mensaje por WhatsApp (Meta Cloud API)
# ---------------------------------------------------------------
def send_message(to, text):
    """Env√≠a mensajes de texto al usuario v√≠a Meta Cloud API."""
    try:
        url = f"https://graph.facebook.com/v20.0/{WABA_PHONE_ID}/messages"
        headers = {
            "Authorization": f"Bearer {META_TOKEN}",
            "Content-Type": "application/json"
        }
        payload = {
            "messaging_product": "whatsapp",
            "to": str(to),
            "type": "text",
            "text": {"body": text}
        }
        response = requests.post(url, headers=headers, json=payload)
        if response.status_code not in (200, 201):
            logging.warning(f"‚ö†Ô∏è Error al enviar mensaje: {response.text}")
        else:
            logging.info(f"üì© Mensaje enviado correctamente a {to}")
    except Exception as e:
        logging.exception(f"‚ùå Error en send_message: {e}")

# ---------------------------------------------------------------
# Funci√≥n auxiliar: extraer n√∫mero de texto
# ---------------------------------------------------------------
def extract_number(text):
    """Extrae el primer n√∫mero encontrado dentro del texto."""
    if not text:
        return None
    clean = text.replace(',', '').replace('$', '')
    match = re.search(r'(\d{1,7})(?:\.\d+)?\b', clean)
    if match:
        try:
            if ':' in text:
                return None
            return float(match.group(1))
        except ValueError:
            return None
    return None

# ---------------------------------------------------------------
# Funci√≥n: interpretar respuestas s√≠/no
# ---------------------------------------------------------------
def interpret_response(text):
    """Interpreta respuestas afirmativas/negativas."""
    text_lower = (text or '').lower()
    positive_keywords = ['s√≠', 'si', 'sip', 'claro', 'por supuesto', 'ok', 'vale', 'afirmativo', 'acepto', 'yes']
    negative_keywords = ['no', 'nop', 'negativo', 'para nada', 'no acepto', 'not']
    if any(k in text_lower for k in positive_keywords):
        return 'positive'
    if any(k in text_lower for k in negative_keywords):
        return 'negative'
    return 'neutral'

# ---------------------------------------------------------------
# Funci√≥n: detectar agradecimientos - NUEVA
# ---------------------------------------------------------------
def is_thankyou_message(text):
    """Detecta mensajes de agradecimiento."""
    text_lower = text.lower().strip()
    thankyou_keywords = [
        'gracias', 'grac', 'gracia', 'thank', 'thanks', 'agradecido', 
        'agradecida', 'agradecimiento', 'te lo agradezco', 'mil gracias'
    ]
    return any(keyword in text_lower for keyword in thankyou_keywords)

# ---------------------------------------------------------------
# MEN√ö PRINCIPAL MEJORADO
# ---------------------------------------------------------------
def send_main_menu(phone):
    menu = (
        "üè¶ *INBURSA - SERVICIOS DISPONIBLES*\n\n"
        "1Ô∏è‚É£ Pr√©stamos IMSS Ley 73\n"
        "2Ô∏è‚É£ Seguros de Auto\n"
        "3Ô∏è‚É£ Seguros de Vida y Salud\n"
        "4Ô∏è‚É£ Tarjetas M√©dicas VRIM\n"
        "5Ô∏è‚É£ Financiamiento Empresarial\n\n"
        "Escribe el *n√∫mero* o el *nombre* del servicio que te interesa:"
    )
    send_message(phone, menu)

# ---------------------------------------------------------------
# Funci√≥n: manejar comando menu
# ---------------------------------------------------------------
def handle_menu_command(phone_number):
    """Maneja el comando menu para reiniciar la conversaci√≥n"""
    user_state.pop(phone_number, None)
    user_data.pop(phone_number, None)
    
    menu_text = (
        "üîÑ *Conversaci√≥n reiniciada*\n\n"
        "üè¶ *INBURSA - SERVICIOS DISPONIBLES*\n\n"
        "1Ô∏è‚É£ Pr√©stamos IMSS Ley 73\n"
        "2Ô∏è‚É£ Seguros de Auto\n"
        "3Ô∏è‚É£ Seguros de Vida y Salud\n"
        "4Ô∏è‚É£ Tarjetas M√©dicas VRIM\n"
        "5Ô∏è‚É£ Financiamiento Empresarial\n\n"
        "Escribe el *n√∫mero* o el *nombre* del servicio que te interesa:"
    )
    send_message(phone_number, menu_text)

# ---------------------------------------------------------------
# BLOQUE PRINCIPAL: FLUJO PR√âSTAMO IMSS LEY 73
# ---------------------------------------------------------------
def handle_imss_flow(phone_number, user_message):
    """Gestiona el flujo completo del pr√©stamo IMSS Ley 73."""
    msg = user_message.lower()

    # Detecci√≥n mejorada de palabras clave IMSS - INCLUYE N√öMERO 1
    imss_keywords = ["pr√©stamo", "prestamo", "imss", "pensi√≥n", "pension", "ley 73", "1"]
    
    # Paso 1: activaci√≥n inicial por palabras clave
    if any(keyword in msg for keyword in imss_keywords):
        current_state = user_state.get(phone_number)
        if current_state not in ["esperando_respuesta_imss", "esperando_monto_pension", 
                               "esperando_monto_solicitado", "esperando_respuesta_nomina"]:
            send_message(phone_number,
                "üëã ¬°Hola! Antes de continuar, necesito confirmar algo importante.\n\n"
                "¬øEres pensionado o jubilado del IMSS bajo la Ley 73? (Responde *s√≠* o *no*)"
            )
            user_state[phone_number] = "esperando_respuesta_imss"
        return True

    # Paso 2: validaci√≥n de respuesta IMSS
    if user_state.get(phone_number) == "esperando_respuesta_imss":
        intent = interpret_response(msg)
        if intent == 'negative':
            send_message(phone_number,
                "Entiendo. Para el pr√©stamo IMSS Ley 73 es necesario ser pensionado del IMSS. üòî\n\n"
                "Pero tengo otros servicios que pueden interesarte:"
            )
            send_main_menu(phone_number)
            user_state.pop(phone_number, None)
        elif intent == 'positive':
            send_message(phone_number,
                "Excelente üëè\n\n¬øCu√°nto recibes al mes por concepto de pensi√≥n? (Ejemplo: 8500)"
            )
            user_state[phone_number] = "esperando_monto_pension"
        else:
            send_message(phone_number, "Por favor responde *s√≠* o *no* para continuar.")
        return True

    # Paso 3: monto de pensi√≥n - VALIDACI√ìN M√çNIMO $5,000
    if user_state.get(phone_number) == "esperando_monto_pension":
        # ‚úÖ DETECTAR AGRADECIMIENTOS DURANTE EL FLUJO
        if is_thankyou_message(msg):
            send_message(phone_number,
                "¬°De nada! üòä\n\n"
                "Continuemos con tu solicitud...\n\n"
                "¬øCu√°nto recibes al mes por concepto de pensi√≥n? (Ejemplo: 8500)"
            )
            return True
            
        pension_monto = extract_number(msg)
        if pension_monto is not None:
            if pension_monto < 5000:
                send_message(phone_number,
                    "Para acceder al pr√©stamo IMSS Ley 73 es necesario recibir una pensi√≥n m√≠nima de $5,000 mensuales. üíµ\n\n"
                    "Si tu pensi√≥n es mayor, por favor ingresa el monto correcto. "
                    "O si prefieres, puedo mostrarte otras opciones que podr√≠an interesarte:"
                )
                send_main_menu(phone_number)
                user_state.pop(phone_number, None)
            else:
                user_data[phone_number] = {"pension_mensual": pension_monto}
                send_message(phone_number,
                    f"Perfecto üí∞ Pensi√≥n registrada: ${pension_monto:,.0f}\n\n"
                    "¬øQu√© monto deseas solicitar? (El m√≠nimo es de $40,000 MXN)"
                )
                user_state[phone_number] = "esperando_monto_solicitado"
        else:
            send_message(phone_number, "Por favor ingresa una cantidad v√°lida, ejemplo: 8500")
        return True

    # Paso 4: monto solicitado - VALIDACI√ìN M√çNIMO $40,000
    if user_state.get(phone_number) == "esperando_monto_solicitado":
        # ‚úÖ DETECTAR AGRADECIMIENTOS DURANTE EL FLUJO
        if is_thankyou_message(msg):
            send_message(phone_number,
                "¬°Por nada! üòä\n\n"
                "Sigamos con tu solicitud...\n\n"
                "¬øQu√© monto deseas solicitar? (El m√≠nimo es de $40,000 MXN)"
            )
            return True
            
        monto = extract_number(msg)
        if monto is not None:
            if monto < 40000:
                send_message(phone_number,
                    "Por el momento el monto m√≠nimo para aplicar al pr√©stamo es de $40,000 MXN. üíµ\n\n"
                    "Si deseas solicitar una cantidad mayor, puedo continuar con tu registro ‚úÖ\n"
                    "O si prefieres, puedo mostrarte otras opciones que podr√≠an interesarte:"
                )
                send_main_menu(phone_number)
                user_state.pop(phone_number, None)
            else:
                user_data[phone_number]["monto_solicitado"] = monto
                
                # MOSTRAR BENEFICIOS INMEDIATAMENTE Y PREGUNTAR POR N√ìMINA
                send_message(phone_number,
                    "üéâ *¬°FELICIDADES!* Cumples con todos los requisitos para el pr√©stamo IMSS Ley 73\n\n"
                    f"‚úÖ Pensionado IMSS Ley 73\n"
                    f"‚úÖ Pensi√≥n mensual: ${user_data[phone_number]['pension_mensual']:,.0f}\n"
                    f"‚úÖ Monto solicitado: ${monto:,.0f}\n\n"
                    "üåü *BENEFICIOS DE TU PR√âSTAMO:*\n"
                    "‚Ä¢ Monto desde $40,000 hasta $650,000\n"
                    "‚Ä¢ Sin aval\n‚Ä¢ Sin revisi√≥n en Bur√≥\n"
                    "‚Ä¢ Descuento directo de tu pensi√≥n\n"
                    "‚Ä¢ Tasa preferencial"
                )
                
                send_message(phone_number,
                    "üí≥ *PARA ACCEDER A BENEFICIOS ADICIONALES EXCLUSIVOS*:\n\n"
                    "¬øTienes tu pensi√≥n depositada en Inbursa o estar√≠as dispuesto a cambiarla?\n\n"
                    "üåü *BENEFICIOS ADICIONALES CON N√ìMINA INBURSA:*\n"
                    "‚Ä¢ Rendimientos del 80% de Cetes\n"
                    "‚Ä¢ Devoluci√≥n del 20% de intereses por pago puntual\n"
                    "‚Ä¢ Anticipo de n√≥mina hasta el 50%\n"
                    "‚Ä¢ Seguro de vida y Medicall Home (telemedicina 24/7)\n"
                    "‚Ä¢ Descuentos en Sanborns y 6,000 comercios\n"
                    "‚Ä¢ Retiros sin comisi√≥n en +28,000 puntos\n\n"
                    "üí° *No necesitas cancelar tu cuenta actual*\n"
                    "üëâ ¬øAceptas cambiar tu n√≥mina a Inbursa? (s√≠/no)"
                )
                user_state[phone_number] = "esperando_respuesta_nomina"
        else:
            send_message(phone_number, "Por favor indica el monto deseado, ejemplo: 65000")
        return True

    # Paso 5: validaci√≥n n√≥mina - NO DETENER PROCESO SI RESPONDE NO
    if user_state.get(phone_number) == "esperando_respuesta_nomina":
        # ‚úÖ DETECTAR AGRADECIMIENTOS DURANTE EL FLUJO
        if is_thankyou_message(msg):
            send_message(phone_number,
                "¬°De nada! üòä\n\n"
                "Para continuar, por favor responde *s√≠* o *no*:\n\n"
                "¬øAceptas cambiar tu n√≥mina a Inbursa para acceder a beneficios adicionales?"
            )
            return True
            
        intent = interpret_response(msg)
        
        # OBTENER DATOS PARA NOTIFICACI√ìN
        data = user_data.get(phone_number, {})
        pension = data.get('pension_mensual', 'N/D')
        monto_solicitado = data.get('monto_solicitado', 'N/D')
        
        if intent == 'positive':
            # CLIENTE ACEPTA CAMBIAR N√ìMINA
            send_message(phone_number,
                "‚úÖ *¬°Excelente decisi√≥n!* Al cambiar tu n√≥mina a Inbursa acceder√°s a todos los beneficios adicionales.\n\n"
                "üìû *Christian te contactar√° en breve* para:\n"
                "‚Ä¢ Confirmar los detalles de tu pr√©stamo\n"
                "‚Ä¢ Explicarte todos los beneficios de n√≥mina Inbursa\n"
                "‚Ä¢ Agendar el cambio de n√≥mina si as√≠ lo decides\n\n"
                "¬°Gracias por confiar en Inbursa! üè¶"
            )

            mensaje_asesor = (
                f"üî• *NUEVO PROSPECTO IMSS LEY 73 - N√ìMINA ACEPTADA*\n\n"
                f"üìû N√∫mero: {phone_number}\n"
                f"üí∞ Pensi√≥n mensual: ${pension:,.0f}\n"
                f"üíµ Monto solicitado: ${monto_solicitado:,.0f}\n"
                f"üè¶ N√≥mina Inbursa: ‚úÖ *ACEPTADA*\n"
                f"üéØ *Cliente interesado en beneficios adicionales*"
            )
            send_message(ADVISOR_NUMBER, mensaje_asesor)
            
        elif intent == 'negative':
            # CLIENTE NO ACEPTA N√ìMINA PERO SIGUE EL PROCESO
            send_message(phone_number,
                "‚úÖ *¬°Perfecto!* Entiendo que por el momento prefieres mantener tu n√≥mina actual.\n\n"
                "üìû *Christian te contactar√° en breve* para:\n"
                "‚Ä¢ Confirmar los detalles de tu pr√©stamo\n"
                "‚Ä¢ Explicarte el proceso de desembolso\n\n"
                "üí° *Recuerda que en cualquier momento puedes cambiar tu n√≥mina a Inbursa* "
                "para acceder a los beneficios adicionales cuando lo desees.\n\n"
                "¬°Gracias por confiar en Inbursa! üè¶"
            )

            mensaje_asesor = (
                f"üìã *NUEVO PROSPECTO IMSS LEY 73*\n\n"
                f"üìû N√∫mero: {phone_number}\n"
                f"üí∞ Pensi√≥n mensual: ${pension:,.0f}\n"
                f"üíµ Monto solicitado: ${monto_solicitado:,.0f}\n"
                f"üè¶ N√≥mina Inbursa: ‚ùå *No por ahora*\n"
                f"üí° *Cliente cumple requisitos - Contactar para pr√©stamo b√°sico*"
            )
            send_message(ADVISOR_NUMBER, mensaje_asesor)
        else:
            send_message(phone_number, 
                "Por favor responde *s√≠* o *no*:\n\n"
                "‚Ä¢ *S√ç* - Para acceder a todos los beneficios adicionales con n√≥mina Inbursa\n"
                "‚Ä¢ *NO* - Para continuar con tu pr√©stamo manteniendo tu n√≥mina actual"
            )
            return True

        # LIMPIAR SESI√ìN DESPU√âS DE NOTIFICAR
        user_state.pop(phone_number, None)
        user_data.pop(phone_number, None)
        return True

    return False

# ---------------------------------------------------------------
# FLUJO PARA OPCIONES DEL MEN√ö
# ---------------------------------------------------------------
def handle_menu_options(phone_number, user_message):
    """Maneja las opciones del men√∫ principal."""
    msg = user_message.lower().strip()
    
    # Mapeo de opciones del men√∫
    menu_options = {
        '1': 'imss',
        'pr√©stamo': 'imss',
        'prestamo': 'imss',
        'imss': 'imss',
        'ley 73': 'imss',
        '2': 'seguro_auto',
        'seguro auto': 'seguro_auto',
        'seguros de auto': 'seguro_auto',
        'auto': 'seguro_auto',
        '3': 'seguro_vida',
        'seguro vida': 'seguro_vida',
        'seguros de vida': 'seguro_vida',
        'seguro salud': 'seguro_vida',
        'vida': 'seguro_vida',
        '4': 'vrim',
        'tarjetas m√©dicas': 'vrim',
        'tarjetas medicas': 'vrim',
        'vrim': 'vrim',
        '5': 'empresarial',
        'financiamiento empresarial': 'empresarial',
        'empresa': 'empresarial',
        'negocio': 'empresarial',
        'pyme': 'empresarial'
    }
    
    option = menu_options.get(msg)
    
    if option == 'imss':
        return handle_imss_flow(phone_number, "pr√©stamo")
    elif option == 'seguro_auto':
        send_message(phone_number,
            "üöó *Seguros de Auto Inbursa*\n\n"
            "Protege tu auto con las mejores coberturas:\n\n"
            "‚úÖ Cobertura amplia contra todo riesgo\n"
            "‚úÖ Asistencia vial las 24 horas\n"
            "‚úÖ Responsabilidad civil\n"
            "‚úÖ Robo total y parcial\n\n"
            "üìû Un asesor se comunicar√° contigo para cotizar tu seguro."
        )
        send_message(ADVISOR_NUMBER, f"üöó NUEVO INTERESADO EN SEGURO DE AUTO\nüìû {phone_number}")
        return True
    elif option == 'seguro_vida':
        send_message(phone_number,
            "üè• *Seguros de Vida y Salud Inbursa*\n\n"
            "Protege a tu familia y tu salud:\n\n"
            "‚úÖ Seguro de vida\n"
            "‚úÖ Gastos m√©dicos mayores\n"
            "‚úÖ Hospitalizaci√≥n\n"
            "‚úÖ Atenci√≥n m√©dica las 24 horas\n\n"
            "üìû Un asesor se comunicar√° contigo para explicarte las coberturas."
        )
        send_message(ADVISOR_NUMBER, f"üè• NUEVO INTERESADO EN SEGURO VIDA/SALUD\nüìû {phone_number}")
        return True
    elif option == 'vrim':
        send_message(phone_number,
            "üí≥ *Tarjetas M√©dicas VRIM*\n\n"
            "Accede a la mejor atenci√≥n m√©dica:\n\n"
            "‚úÖ Consultas m√©dicas ilimitadas\n"
            "‚úÖ Especialistas y estudios de laboratorio\n"
            "‚úÖ Medicamentos con descuento\n"
            "‚úÖ Atenci√≥n dental y oftalmol√≥gica\n\n"
            "üìû Un asesor se comunicar√° contigo para explicarte los beneficios."
        )
        send_message(ADVISOR_NUMBER, f"üí≥ NUEVO INTERESADO EN TARJETAS VRIM\nüìû {phone_number}")
        return True
    elif option == 'empresarial':
        send_message(phone_number,
            "üè¢ *Financiamiento Empresarial Inbursa*\n\n"
            "Impulsa tu negocio con:\n\n"
            "‚úÖ Cr√©ditos para capital de trabajo\n"
            "‚úÖ Financiamiento para maquinaria\n"
            "‚úÖ L√≠neas de cr√©dito\n"
            "‚úÖ Planes de inversi√≥n\n\n"
            "üìû Un asesor se comunicar√° contigo para analizar tu proyecto."
        )
        send_message(ADVISOR_NUMBER, f"üè¢ NUEVO INTERESADO EN FINANCIAMIENTO EMPRESARIAL\nüìû {phone_number}")
        return True
    
    return False

# ---------------------------------------------------------------
# Endpoint de verificaci√≥n de Meta Webhook
# ---------------------------------------------------------------
@app.route("/webhook", methods=["GET"])
def verify_webhook():
    mode = request.args.get("hub.mode")
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")
    if mode == "subscribe" and token == VERIFY_TOKEN:
        logging.info("‚úÖ Webhook verificado correctamente.")
        return challenge, 200
    logging.warning("‚ùå Verificaci√≥n de webhook fallida.")
    return "Forbidden", 403

# ---------------------------------------------------------------
# Endpoint principal para recepci√≥n de mensajes - CON DETECCI√ìN DE AGRADECIMIENTOS
# ---------------------------------------------------------------
@app.route("/webhook", methods=["POST"])
def receive_message():
    try:
        data = request.get_json()
        logging.info(f"üì© Datos recibidos: {json.dumps(data, ensure_ascii=False)}")

        entry = data.get("entry", [])[0]
        change = entry.get("changes", [])[0]
        value = change.get("value", {})
        messages = value.get("messages", [])

        if not messages:
            return jsonify({"status": "ignored"}), 200

        message = messages[0]
        phone_number = message.get("from")
        message_type = message.get("type")

        if message_type == "text":
            user_message = message["text"]["body"].strip()
            
            logging.info(f"üì± Mensaje de {phone_number}: '{user_message}'")

            # ‚úÖ DETECCI√ìN MEJORADA DE COMANDO MENU (CON TILDES Y VARIANTES)
            if user_message.lower() in ["menu", "men√∫", "men", "opciones", "servicios"]:
                handle_menu_command(phone_number)
                return jsonify({"status": "ok"}), 200

            # ‚úÖ DETECCI√ìN DE AGRADECIMIENTOS - ANTES DE LOS FLUJOS PRINCIPALES
            if is_thankyou_message(user_message):
                send_message(phone_number,
                    "¬°De nada! üòä\n\n"
                    "Quedo a tus √≥rdenes para cualquier otra cosa.\n\n"
                    "¬øHay algo m√°s en lo que pueda ayudarte?"
                )
                return jsonify({"status": "ok"}), 200

            # ‚úÖ PRIMERO: Procesar flujo IMSS si est√° activo
            if user_state.get(phone_number) in ["esperando_respuesta_imss", "esperando_monto_pension", 
                                              "esperando_monto_solicitado", "esperando_respuesta_nomina"]:
                if handle_imss_flow(phone_number, user_message):
                    return jsonify({"status": "ok"}), 200

            # ‚úÖ SEGUNDO: Procesar opciones del men√∫ principal
            if handle_menu_options(phone_number, user_message):
                return jsonify({"status": "ok"}), 200

            # ‚úÖ TERCERO: Manejar saludos y mensajes no reconocidos
            if user_message.lower() in ["hola", "hi", "hello", "buenas", "buenos d√≠as", "buenas tardes"]:
                send_message(phone_number,
                    "üëã ¬°Hola! Soy *Vicky*, tu asistente virtual de Inbursa.\n\n"
                    "üè¶ *SERVICIOS DISPONIBLES:*\n"
                    "1Ô∏è‚É£ Pr√©stamos IMSS Ley 73\n"
                    "2Ô∏è‚É£ Seguros de Auto\n"
                    "3Ô∏è‚É£ Seguros de Vida y Salud\n"
                    "4Ô∏è‚É£ Tarjetas M√©dicas VRIM\n"
                    "5Ô∏è‚É£ Financiamiento Empresarial\n\n"
                    "Escribe el *n√∫mero* o el *nombre* del servicio que te interesa.\n\n"
                    "Tambi√©n puedes escribir *men√∫* en cualquier momento."
                )
            else:
                send_message(phone_number,
                    "üëã Hola, soy *Vicky*, tu asistente de Inbursa.\n\n"
                    "No entend√≠ tu mensaje. Te puedo ayudar con:\n\n"
                    "üè¶ *SERVICIOS DISPONIBLES:*\n"
                    "‚Ä¢ Pr√©stamos IMSS (escribe '1' o 'pr√©stamo')\n"  
                    "‚Ä¢ Seguros de Auto ('2' o 'seguro auto')\n"
                    "‚Ä¢ Seguros de Vida ('3' o 'seguro vida')\n"
                    "‚Ä¢ Tarjetas M√©dicas VRIM ('4' o 'vrim')\n"
                    "‚Ä¢ Financiamiento Empresarial ('5' o 'empresa')\n\n"
                    "Escribe *men√∫* para ver todas las opciones organizadas."
                )
            return jsonify({"status": "ok"}), 200

        else:
            send_message(phone_number, 
                "Por ahora solo puedo procesar mensajes de texto üì©\n\n"
                "Escribe *men√∫* para ver los servicios disponibles."
            )
            return jsonify({"status": "ok"}), 200

    except Exception as e:
        logging.exception(f"‚ùå Error en receive_message: {e}")
        return jsonify({"error": str(e)}), 500

# ---------------------------------------------------------------
# Endpoint de salud
# ---------------------------------------------------------------
@app.route("/health", methods=["GET"])
def health():
    return jsonify({"status": "ok", "service": "Vicky Bot Inbursa"}), 200

# ---------------------------------------------------------------
# Ejecuci√≥n principal
# ---------------------------------------------------------------
if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    logging.info(f"üöÄ Iniciando Vicky Bot en puerto {port}")
    app.run(host="0.0.0.0", port=port)
